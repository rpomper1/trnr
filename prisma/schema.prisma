generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user {
  id         Int        @id @default(autoincrement())
  first_name String     @db.VarChar(255)
  last_name  String     @db.VarChar(255)
  email      String     @unique @db.VarChar(255)
  password   String     @db.VarChar(255)
  role       String     @db.VarChar(255)
  created_at DateTime   @default(now()) @db.Timestamp(6)
  disabled   Boolean
  exercise   exercise[]
  trainee    trainee[]
  trainer    trainer[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model trainer {
  id                Int       @id @default(autoincrement())
  user_id           Int
  paid_until        DateTime? @db.Timestamp(6)
  subscription_plan String?   @default("Basic") @db.VarChar
  status            String?   @default("unapproved") @db.VarChar
  trainee           trainee[]
  user              user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model trainee {
  id                Int                 @id @default(autoincrement())
  user_id           Int
  trainer_id        Int
  status            String?             @default("unapproved") @db.VarChar
  paid_until        DateTime?           @db.Timestamp(6)
  start_weight      Float
  goal              String              @db.VarChar(255)
  target_calories   Int
  target_protein    Int
  target_carbs      Int
  target_fats       Int
  daily_weight_logs daily_weight_logs[]
  trainer           trainer             @relation(fields: [trainer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              user                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  training_session  training_session[]
}

model daily_weight_logs {
  id         Int      @id @default(autoincrement())
  trainee_id Int
  value      Float
  date       DateTime @db.Date
  trainee    trainee  @relation(fields: [trainee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model exercise {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  description        String?
  created_by_id      Int
  video_link         String?              @db.VarChar(255)
  is_private         Boolean?             @default(true)
  user               user                 @relation(fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  training_instances training_instances[]
}

model training_instances {
  id               Int              @id @default(autoincrement())
  training_id      Int
  exercise_id      Int
  set_number       Int
  reps             Int
  weight           Float
  exercise         exercise         @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  training_session training_session @relation(fields: [training_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model training_session {
  id                 Int                  @id @default(autoincrement())
  trainee_id         Int
  name               String               @db.VarChar(255)
  completed          Boolean?             @default(false)
  scheduled_date     DateTime?            @db.Date
  training_instances training_instances[]
  trainee            trainee              @relation(fields: [trainee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
